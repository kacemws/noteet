[{"C:\\DevMobile\\web-React\\noteet\\src\\index.tsx":"1","C:\\DevMobile\\web-React\\noteet\\src\\reportWebVitals.ts":"2","C:\\DevMobile\\web-React\\noteet\\src\\App.tsx":"3","C:\\DevMobile\\web-React\\noteet\\src\\Components\\SideMenu.tsx":"4","C:\\DevMobile\\web-React\\noteet\\src\\Components\\Panel.tsx":"5","C:\\DevMobile\\web-React\\noteet\\src\\Components\\Card.tsx":"6","C:\\DevMobile\\web-React\\noteet\\src\\utils\\Note.ts":"7"},{"size":478,"mtime":1610963037718,"results":"8","hashOfConfig":"9"},{"size":425,"mtime":1610904671475,"results":"10","hashOfConfig":"9"},{"size":1075,"mtime":1611254485299,"results":"11","hashOfConfig":"9"},{"size":4062,"mtime":1611217788514,"results":"12","hashOfConfig":"9"},{"size":927,"mtime":1611254580634,"results":"13","hashOfConfig":"9"},{"size":2140,"mtime":1611255830810,"results":"14","hashOfConfig":"9"},{"size":202,"mtime":1611255232434,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1ovkqxo",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"C:\\DevMobile\\web-React\\noteet\\src\\index.tsx",[],["33","34"],"C:\\DevMobile\\web-React\\noteet\\src\\reportWebVitals.ts",[],"C:\\DevMobile\\web-React\\noteet\\src\\App.tsx",["35","36"],"import { useState } from \"react\";\nimport { Panel } from \"./Components/Panel\";\nimport { Sidemenu } from \"./Components/SideMenu\";\nimport \"./Styles/App.scss\";\nimport \"./Styles/colors.scss\";\nimport { Note } from \"./utils/Note\";\n\nconst colors = [\"#ffcf7d\", \"#f0a177\", \"#b095f6\", \"#55cffa\", \"#e6ee96\"];\n\nfunction App() {\n  const [selected, setselected] = useState<\n    React.SetStateAction<number | null | undefined>\n  >(null);\n\n  const [notes, setNotes] = useState<Array<Note>>([]);\n\n  return (\n    <div\n      style={{\n        height: \"100%\",\n        width: \"100%\",\n        display: \"flex\",\n      }}\n    >\n      <Sidemenu\n        setSelected={(index: number | null | undefined) => {\n          setselected(index);\n          if (index != null && index != undefined) {\n            const aux = new Note(colors[index], \"\");\n            notes.unshift(aux);\n            setNotes(notes);\n          }\n        }}\n      />\n      <Panel\n        notes={notes}\n        updateNotes={(notes: Array<Note>) => {\n          setNotes(notes);\n        }}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","C:\\DevMobile\\web-React\\noteet\\src\\Components\\SideMenu.tsx",[],"C:\\DevMobile\\web-React\\noteet\\src\\Components\\Panel.tsx",[],"C:\\DevMobile\\web-React\\noteet\\src\\Components\\Card.tsx",["37","38","39"],"import { useEffect, useState } from \"react\";\r\nimport edit from \"../Assets/edit.svg\";\r\nimport save from \"../Assets/save.svg\";\r\nimport \"../Styles/Components/Card.scss\";\r\nimport { Note } from \"../utils/Note\";\r\n\r\nimport { useSpring, animated } from \"react-spring\";\r\n\r\ninterface props {\r\n  note: Note;\r\n  index: number;\r\n  updateNote: (note: Note, index: number) => void;\r\n}\r\nexport const Card: React.FC<props> = ({ note, index, updateNote, ...rest }) => {\r\n  const [animate, setAnimate] = useState(false);\r\n  const [value, setValue] = useState(\"\");\r\n  useEffect(() => {\r\n    setValue(note.note);\r\n    if (index == 0) {\r\n      console.log(\"will animate \" + note.color + \" : \" + index);\r\n\r\n      setAnimate(false);\r\n      setTimeout(() => {\r\n        setAnimate(true);\r\n      }, 100);\r\n    } else {\r\n      console.log(\"changed index\");\r\n    }\r\n  }, [note]);\r\n  const firstProp = useSpring({\r\n    // marginLeft: animate ? 16 : -200,\r\n    width: animate ? 350 : 0,\r\n    height: animate ? 310 : 0,\r\n    opacity: animate ? 1 : 0,\r\n    backgroundColor: note.color,\r\n  });\r\n  const cardProps = useSpring({\r\n    backgroundColor: note.color,\r\n  });\r\n  return (\r\n    <animated.div\r\n      key={index}\r\n      className=\"note\"\r\n      style={index ? cardProps : firstProp}\r\n    >\r\n      <textarea\r\n        placeholder=\"Type your note\"\r\n        value={value}\r\n        onChange={({ target }) => {\r\n          setValue(target.value);\r\n        }}\r\n      ></textarea>\r\n      <div className=\"footer\">\r\n        <div className=\"date\">\r\n          <span>\r\n            {new Intl.DateTimeFormat(\"en-US\", {\r\n              year: \"numeric\",\r\n              month: \"long\",\r\n              day: \"2-digit\",\r\n            }).format(Date.parse(note.date.toDateString()))}\r\n          </span>\r\n        </div>\r\n        <div className=\"edit\">\r\n          <button\r\n            disabled={value == note.note || !value}\r\n            onClick={(_) => {\r\n              updateNote(new Note(note.color, value), index);\r\n            }}\r\n          >\r\n            <img src={note.note ? edit : save} alt=\"Edit Icon\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </animated.div>\r\n  );\r\n};\r\n","C:\\DevMobile\\web-React\\noteet\\src\\utils\\Note.ts",[],{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":11,"column":10,"nodeType":"46","messageId":"47","endLine":11,"endColumn":18},{"ruleId":"48","severity":1,"message":"49","line":28,"column":38,"nodeType":"50","messageId":"51","endLine":28,"endColumn":40},{"ruleId":"48","severity":1,"message":"52","line":19,"column":15,"nodeType":"50","messageId":"51","endLine":19,"endColumn":17},{"ruleId":"53","severity":1,"message":"54","line":29,"column":6,"nodeType":"55","endLine":29,"endColumn":12,"suggestions":"56"},{"ruleId":"48","severity":1,"message":"52","line":65,"column":29,"nodeType":"50","messageId":"51","endLine":65,"endColumn":31},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"@typescript-eslint/no-unused-vars","'selected' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'index'. Either include it or remove the dependency array.","ArrayExpression",["59"],"no-global-assign","no-unsafe-negation",{"desc":"60","fix":"61"},"Update the dependencies array to be: [index, note]",{"range":"62","text":"63"},[842,848],"[index, note]"]