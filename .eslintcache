[{"C:\\DevMobile\\web-React\\noteet\\src\\index.tsx":"1","C:\\DevMobile\\web-React\\noteet\\src\\reportWebVitals.ts":"2","C:\\DevMobile\\web-React\\noteet\\src\\App.tsx":"3","C:\\DevMobile\\web-React\\noteet\\src\\Components\\SideMenu.tsx":"4","C:\\DevMobile\\web-React\\noteet\\src\\Components\\Panel.tsx":"5","C:\\DevMobile\\web-React\\noteet\\src\\Components\\Card.tsx":"6","C:\\DevMobile\\web-React\\noteet\\src\\utils\\Note.ts":"7","C:\\DevMobile\\web-React\\noteet\\src\\utils\\random.ts":"8","C:\\DevMobile\\web-React\\noteet\\src\\Views\\NoteView.tsx":"9","C:\\DevMobile\\web-React\\noteet\\src\\Views\\SignIn.tsx":"10","C:\\DevMobile\\web-React\\noteet\\src\\Components\\image.tsx":"11","C:\\DevMobile\\web-React\\noteet\\src\\Views\\Signup.tsx":"12","C:\\DevMobile\\web-React\\noteet\\src\\api\\connect.instance.ts":"13","C:\\DevMobile\\web-React\\noteet\\src\\api\\axios.ts":"14","C:\\DevMobile\\web-React\\noteet\\src\\Components\\Loader.tsx":"15","C:\\DevMobile\\web-React\\noteet\\src\\api\\notes.instance.ts":"16","C:\\DevMobile\\web-React\\noteet\\src\\Components\\Toast.tsx":"17"},{"size":478,"mtime":1610963037718,"results":"18","hashOfConfig":"19"},{"size":425,"mtime":1610904671475,"results":"20","hashOfConfig":"19"},{"size":3943,"mtime":1611597747730,"results":"21","hashOfConfig":"19"},{"size":4066,"mtime":1611338490142,"results":"22","hashOfConfig":"19"},{"size":2079,"mtime":1611681445094,"results":"23","hashOfConfig":"19"},{"size":3046,"mtime":1611596514749,"results":"24","hashOfConfig":"19"},{"size":280,"mtime":1611262198417,"results":"25","hashOfConfig":"19"},{"size":323,"mtime":1611262182122,"results":"26","hashOfConfig":"19"},{"size":3053,"mtime":1611681376032,"results":"27","hashOfConfig":"19"},{"size":5237,"mtime":1611677745457,"results":"28","hashOfConfig":"19"},{"size":298,"mtime":1611436755587,"results":"29","hashOfConfig":"19"},{"size":10002,"mtime":1611677760445,"results":"30","hashOfConfig":"19"},{"size":389,"mtime":1611576173382,"results":"31","hashOfConfig":"19"},{"size":2053,"mtime":1611677990064,"results":"32","hashOfConfig":"19"},{"size":219,"mtime":1611584700384,"results":"33","hashOfConfig":"19"},{"size":783,"mtime":1611596387915,"results":"34","hashOfConfig":"19"},{"size":847,"mtime":1611682192742,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1ovkqxo",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\DevMobile\\web-React\\noteet\\src\\index.tsx",[],["77","78"],"C:\\DevMobile\\web-React\\noteet\\src\\reportWebVitals.ts",[],"C:\\DevMobile\\web-React\\noteet\\src\\App.tsx",["79","80","81","82","83","84","85","86"],"import \"./Styles/App.scss\";\nimport \"./Styles/colors.scss\";\nimport NoteView from \"./Views/NoteView\";\nimport Signin from \"./Views/SignIn\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Signup from \"./Views/Signup\";\n\nimport Cookies from \"js-cookie\";\nimport { useEffect, useState } from \"react\";\nimport { refreshExpiredToken, setAuthToken } from \"./api/axios\";\nimport Loader from \"./Components/Loader\";\n\nfunction App() {\n  /*Token*/\n  const [token, setToken] = useState<string | null>(\n    Cookies.get(\"accessToken\") ?? \"\"\n  ); // the actual token;\n  /*Token*/\n\n  const [interval, setIntervalHandler] = useState<number>(0);\n\n  const [fetchingToken, setFetchingToken] = useState(token == \"\"); // a variable that checks wheter we are refreshing the token or not\n\n  useEffect(() => {\n    window.clearInterval(interval); // to clear all sets interval for the check cookie function\n\n    let cookieToken = Cookies.get(\"accessToken\");\n    let refreshToken = localStorage.getItem(\"refreshToken\");\n\n    /*to know wheter to ask for a new token or not*/\n    if (\n      cookieToken == undefined &&\n      refreshToken != undefined &&\n      refreshToken.length > 0\n    ) {\n      // if cookie expired\n      setFetchingToken(true);\n      refreshExpiredToken(refreshToken).then((res) => {\n        console.log(res);\n\n        var in15minutes = new Date(new Date().getTime() + 900000);\n\n        Cookies.set(\"accessToken\", res.data.accessToken, {\n          expires: in15minutes,\n        });\n        localStorage.setItem(\"refreshToken\", res.data.refreshToken);\n\n        setAuthToken(res.data.accessToken);\n        setToken(res.data.accessToken);\n        //set the fetched credentials where needed : the cookie, local storage , the axios instance and finally the token variable that is local to the app file\n\n        setFetchingToken(false);\n        //refreshing done!!!\n\n        let handler = window.setInterval(checkCookie, 100); // setting an interval each 100ms (0.1 seconds) to execute the check cookie function ( check line 58)\n        setIntervalHandler(handler);\n      });\n    } else {\n      // if both undefined of both defined ( refresh_token && access_token)\n      setFetchingToken(false);\n      let handler = window.setInterval(checkCookie, 100); // setting an interval each 100ms (0.1 seconds) to execute the check cookie function ( check line 58)\n      setIntervalHandler(handler);\n    }\n  }, []);\n\n  const checkCookie = (function () {\n    // function to check wheter cookie changed or not\n\n    var lastCookie = document.cookie; // 'static' memory between function calls (old cookie)\n\n    return function () {\n      var currentCookie = document.cookie; // current cookie;\n\n      if (currentCookie != lastCookie) {\n        // if cookie changed\n        lastCookie = currentCookie;\n        console.log(\"changed a cookie!\");\n        let token =\n          Cookies.get(\"accessToken\") != undefined\n            ? Cookies.get(\"accessToken\")\n            : \"no token\";\n        if (token == \"no token\") {\n          console.log(\"token expired...\");\n        }\n        setToken(token ?? \"\"); //set token stored inside the new cookie\n      }\n    };\n  })();\n\n  if (token != \"\") {\n    setAuthToken(token);\n  }\n\n  let routes; // declaring the routes\n\n  if (token === \"\") {\n    routes = (\n      <Switch>\n        <Route path=\"/sign-up\" component={Signup} />\n        <Route exact path=\"/\" component={Signin} />\n        {/*done*/}\n        <Route path=\"*\">\n          <h1>404 error</h1>\n        </Route>\n      </Switch>\n    );\n  } else {\n    routes = (\n      <Switch>\n        <Route exact path=\"/\" render={() => <NoteView />} />\n        <Route path=\"\" render={() => <h1>404 error</h1>} />\n      </Switch>\n    );\n  }\n\n  return (\n    <Router>\n      <div\n        style={{\n          height: \"100%\",\n          minHeight: \"100vh\",\n        }}\n      >\n        {fetchingToken ? <Loader /> : routes}\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","C:\\DevMobile\\web-React\\noteet\\src\\Components\\SideMenu.tsx",[],"C:\\DevMobile\\web-React\\noteet\\src\\Components\\Panel.tsx",["87","88"],"C:\\DevMobile\\web-React\\noteet\\src\\Components\\Card.tsx",["89","90","91"],"import { useEffect, useState } from \"react\";\r\nimport trash from \"../Assets/trash.svg\";\r\nimport save from \"../Assets/save.svg\";\r\nimport \"../Styles/Components/Card.scss\";\r\nimport { Note } from \"../utils/Note\";\r\n\r\nimport { useSpring, animated } from \"react-spring\";\r\n\r\ninterface props {\r\n  note: Note;\r\n  index: number;\r\n  updateNote: (note: Note, index: number) => void;\r\n  deleteNote: (index: number) => void;\r\n}\r\nexport const Card: React.FC<props> = ({\r\n  note,\r\n  index,\r\n  updateNote,\r\n  deleteNote,\r\n  ...rest\r\n}) => {\r\n  const [animate, setAnimate] = useState(false);\r\n  const [value, setValue] = useState(\"\");\r\n  useEffect(() => {\r\n    setValue(note.note);\r\n    if (index == 0) {\r\n      setAnimate(false);\r\n      setTimeout(() => {\r\n        setAnimate(true);\r\n      }, 100);\r\n    } else {\r\n      console.log(note);\r\n      console.log(\"changed index\");\r\n    }\r\n  }, [note]);\r\n  const firstProp = useSpring({\r\n    marginLeft: animate ? \"1rem\" : \"-12.5rem\",\r\n    width: animate ? 310 : 0,\r\n    height: animate ? 310 : 0,\r\n    opacity: animate ? 1 : 0,\r\n    backgroundColor: note.color,\r\n  });\r\n\r\n  const deleteButtonProps = useSpring({\r\n    opacity: note?.note ? 1 : 0,\r\n    height: note?.note ? \"3rem\" : \"0rem\",\r\n    width: note?.note ? \"3rem\" : \"0rem\",\r\n  });\r\n\r\n  const cardProps = useSpring({\r\n    backgroundColor: note.color,\r\n  });\r\n  return (\r\n    <animated.div\r\n      key={note.id}\r\n      className=\"note\"\r\n      style={index ? cardProps : firstProp}\r\n    >\r\n      <textarea\r\n        placeholder=\"Type your note\"\r\n        value={value}\r\n        onChange={({ target }) => {\r\n          setValue(target.value);\r\n        }}\r\n      ></textarea>\r\n      <div className=\"footer\">\r\n        <div className=\"date\">\r\n          <span>\r\n            {new Intl.DateTimeFormat(\"en-US\", {\r\n              year: \"numeric\",\r\n              month: \"long\",\r\n              day: \"2-digit\",\r\n            }).format(Date.parse(note.date.toDateString()))}\r\n          </span>\r\n        </div>\r\n        <div\r\n          className=\"edit\"\r\n          style={{\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"flex-end\",\r\n          }}\r\n        >\r\n          {note.note ? (\r\n            <animated.button\r\n              style={deleteButtonProps}\r\n              onClick={(_) => {\r\n                deleteNote(index);\r\n              }}\r\n            >\r\n              <animated.img src={trash} alt=\"delete Icon\" />\r\n            </animated.button>\r\n          ) : (\r\n            <></>\r\n          )}\r\n          <button\r\n            disabled={value == note.note || !value}\r\n            onClick={(_) => {\r\n              // if a note has an id with a length diffrent than 5, we wouldn't change it. if not create a new one\r\n              console.log(note);\r\n              const newNote = note;\r\n              newNote.note = value;\r\n              updateNote(newNote, index);\r\n            }}\r\n          >\r\n            <animated.img src={save} alt=\"Save Icon\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </animated.div>\r\n  );\r\n};\r\n","C:\\DevMobile\\web-React\\noteet\\src\\utils\\Note.ts",[],"C:\\DevMobile\\web-React\\noteet\\src\\utils\\random.ts",[],"C:\\DevMobile\\web-React\\noteet\\src\\Views\\NoteView.tsx",["92","93","94","95","96"],"C:\\DevMobile\\web-React\\noteet\\src\\Views\\SignIn.tsx",["97"],"import React, { useState } from \"react\";\r\nimport \"../Styles/Views/SignIn.scss\";\r\nimport LandingImage from \"../Components/image\";\r\n// import logo from \"../Assets/neo.png\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { login } from \"../api/connect.instance\";\r\nimport Cookies from \"js-cookie\";\r\n\r\nexport default function Signin() {\r\n  const history = useHistory();\r\n\r\n  const { register, handleSubmit, errors, setError } = useForm({\r\n    mode: \"onChange\",\r\n  }); //settings for react hook form\r\n\r\n  const [innerLoading, setInnerLoading] = useState(false); // to know wheter we are fetching data or not\r\n  const onSubmit = async (data: any) => {\r\n    if (!innerLoading) {\r\n      setInnerLoading(true);\r\n      try {\r\n        const answ = await login(data);\r\n        console.log(answ.data);\r\n        var in15minutes = new Date(new Date().getTime() + 900000);\r\n        Cookies.set(\"accessToken\", answ.data.accessToken, {\r\n          expires: in15minutes,\r\n        });\r\n        localStorage.setItem(\"refreshToken\", answ.data.refreshToken);\r\n      } catch (err) {\r\n        setInnerLoading(false);\r\n        if (err?.response?.status == 400) {\r\n          setError(\"email\", {\r\n            type: \"manual\",\r\n            message: \"Email/password combo not found\",\r\n          });\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"sign-in\">\r\n      <div className=\"container\">\r\n        <div className=\"left-part\">\r\n          <div className=\"header\">\r\n            {/* <img className=\"logo\" src={logo} alt=\"neo's logo\" /> */}\r\n            {/* Noteet */}\r\n          </div>\r\n          <div className=\"content\">\r\n            <LandingImage />\r\n          </div>\r\n          <div className=\"greetings legend\">\r\n            <h1\r\n              style={{\r\n                textTransform: \"uppercase\",\r\n              }}\r\n            >\r\n              Noteet\r\n            </h1>\r\n            <h3>Manage all your notes with style and in one place</h3>\r\n          </div>\r\n        </div>\r\n        <div className=\"right-part\">\r\n          <div className=\"right-part-inner\">\r\n            {/*Header*/}\r\n            <header>\r\n              {/* <img className=\"logo\" src={logo} alt=\"neo's logo\" /> */}\r\n            </header>\r\n            {/*Header*/}\r\n\r\n            {/*Title*/}\r\n            <div className=\"greetings\">\r\n              <h1>Welcome</h1>\r\n              <h3>\r\n                New?{\" \"}\r\n                <span\r\n                  className=\"highlited\"\r\n                  onClick={(_) => {\r\n                    if (!innerLoading) history.push(\"sign-up\");\r\n                  }}\r\n                >\r\n                  Signup !\r\n                </span>\r\n              </h3>\r\n            </div>\r\n            {/*Title*/}\r\n\r\n            {/*Form*/}\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n              {/*Username field*/}\r\n              <div className=\"input-container\">\r\n                <label className=\"label\" htmlFor=\"email\">\r\n                  Email\r\n                </label>\r\n                <input\r\n                  className=\"input\"\r\n                  style={{\r\n                    borderColor: errors.email && \"red\",\r\n                  }}\r\n                  type=\"text\"\r\n                  name=\"email\"\r\n                  ref={register({\r\n                    required: true,\r\n                    pattern: {\r\n                      value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\r\n                      message: \"Entered value does not match email format\",\r\n                    },\r\n                  })}\r\n                />\r\n                {errors.email && (\r\n                  <div className=\"error\">\r\n                    {errors.email.type === \"manual\"\r\n                      ? errors?.email?.message\r\n                      : errors?.email?.message ?? \"Invalid data\"}\r\n                  </div>\r\n                )}\r\n              </div>\r\n              {/*Username field*/}\r\n\r\n              {/*Password field*/}\r\n              <div className=\"input-container\">\r\n                <label className=\"label\" htmlFor=\"password\">\r\n                  <div>Password</div>\r\n                  {/* <div className=\"forgot-password\">Forgot password ?</div> */}\r\n                </label>\r\n                <input\r\n                  className=\"input\"\r\n                  type=\"password\"\r\n                  name=\"password\"\r\n                  ref={register({\r\n                    required: true,\r\n                    minLength: 8,\r\n                  })}\r\n                  style={{\r\n                    borderColor: errors.password && \"red\",\r\n                  }}\r\n                />\r\n                {errors.password && <div className=\"error\">Invalid data</div>}\r\n              </div>\r\n              {/*Password field*/}\r\n\r\n              <div className=\"button\">\r\n                <button className=\"submit-button\" type=\"submit\">\r\n                  Signin\r\n                </button>\r\n                {innerLoading && (\r\n                  <div className=\"overlay\">\r\n                    <div className=\"spinner\"></div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </form>\r\n            {/*Form*/}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\DevMobile\\web-React\\noteet\\src\\Components\\image.tsx",["98"],"import React from \"react\";\r\nimport landingImage from \"../Assets/landing-image.svg\";\r\nexport default function LandingImage() {\r\n  return (\r\n    <>\r\n      <img\r\n        src={landingImage}\r\n        style={{\r\n          height: \"100%\",\r\n          width: \"100%\",\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","C:\\DevMobile\\web-React\\noteet\\src\\Views\\Signup.tsx",["99","100"],"import React, { useState } from \"react\";\r\nimport \"../Styles/Views/Signup.scss\";\r\nimport LandingImage from \"../Components/image\";\r\n// import logo from \"../Assets/neo.png\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { signup } from \"../api/connect.instance\";\r\nimport Cookies from \"js-cookie\";\r\n\r\nexport default function Signup() {\r\n  const history = useHistory();\r\n\r\n  const { register, handleSubmit, errors, getValues, setError } = useForm({\r\n    mode: \"onChange\",\r\n  }); //settings for react hook form\r\n\r\n  const [innerLoading, setInnerLoading] = useState(false); // to know wheter we are fetching data or not\r\n\r\n  const onSubmit = async (data: any) => {\r\n    if (!innerLoading) {\r\n      setInnerLoading(true);\r\n      try {\r\n        let aux = Object.assign({}, data);\r\n        delete aux[\"confirm_password\"];\r\n        const answ = await signup(aux);\r\n        console.log(answ.data);\r\n        var in15minutes = new Date(new Date().getTime() + 900000);\r\n        Cookies.set(\"accessToken\", answ.data.accessToken, {\r\n          expires: in15minutes,\r\n        });\r\n        localStorage.setItem(\"refreshToken\", answ.data.refreshToken);\r\n\r\n        setInnerLoading(false);\r\n        // history.push(\"/notes\");\r\n      } catch (err) {\r\n        console.log({ err });\r\n        setInnerLoading(false);\r\n        if (err?.response?.status == 400) {\r\n          setError(\"email\", {\r\n            type: \"manual\",\r\n            message: \"An account with this email already exists\",\r\n          });\r\n        }\r\n      }\r\n      //   aux.phone_number = \"+213\" + aux.phone_number.substring(1);\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"sign-up\">\r\n      <div className=\"container\">\r\n        <div className=\"left-part\">\r\n          <div className=\"header\">\r\n            {/* <img className=\"logo\" src={logo} alt=\"neo's logo\" /> */}\r\n          </div>\r\n          <div className=\"content\">\r\n            <LandingImage />\r\n          </div>\r\n          <div className=\"greetings legend\">\r\n            <h1\r\n              style={{\r\n                textTransform: \"uppercase\",\r\n              }}\r\n            >\r\n              Noteet\r\n            </h1>\r\n            <h3>Manage all your notes with style and in one place</h3>\r\n          </div>\r\n        </div>\r\n        <div className=\"right-part\">\r\n          <div className=\"right-part-inner\">\r\n            <header>\r\n              {/* <img className=\"logo\" src={logo} alt=\"neo's logo\" /> */}\r\n            </header>\r\n            {/*Header*/}\r\n\r\n            {/*Form*/}\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n              {/*Username field*/}\r\n\r\n              {/*Email field*/}\r\n              <div className=\"input-container\">\r\n                <label className=\"label\" htmlFor=\"email\">\r\n                  Email\r\n                </label>\r\n                <input\r\n                  className=\"input\"\r\n                  type=\"email\"\r\n                  name=\"email\"\r\n                  ref={register({\r\n                    required: true,\r\n                    pattern: {\r\n                      value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\r\n                      message: \"Entered value does not match email format\",\r\n                    },\r\n                  })}\r\n                  style={{\r\n                    borderColor: errors.email && \"red\",\r\n                  }}\r\n                />\r\n                {errors.email && (\r\n                  <div className=\"error\">\r\n                    {[\"pattern\", \"manual\"].includes(errors.email.type)\r\n                      ? errors.email.message\r\n                      : \"Invalid email\"}\r\n                  </div>\r\n                )}\r\n              </div>\r\n              {/*Email field*/}\r\n\r\n              {/* <div className=\"input-container\">\r\n                <label className=\"label\" htmlFor=\"username\">\r\n                  Username\r\n                </label>\r\n                <input\r\n                  className=\"input\"\r\n                  style={{\r\n                    borderColor: errors.username && \"red\",\r\n                  }}\r\n                  type=\"text\"\r\n                  name=\"username\"\r\n                  ref={register({\r\n                    required: true,\r\n                    maxLength: 20,\r\n                  })}\r\n                />\r\n                {errors.username ? (\r\n                  <div className=\"error\">\r\n                    {errors.username.type === \"manual\"\r\n                      ? errors.username.message\r\n                      : \"Invalid username\"}\r\n                  </div>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n              </div> */}\r\n              {/*Username field*/}\r\n\r\n              {/*first & last name field*/}\r\n              <div className=\"name-container\">\r\n                <div className=\"input-container\">\r\n                  <label className=\"label\" htmlFor=\"firstName\">\r\n                    First name\r\n                  </label>\r\n                  <input\r\n                    className=\"input\"\r\n                    type=\"text\"\r\n                    name=\"firstName\"\r\n                    ref={register({\r\n                      required: true,\r\n                    })}\r\n                    style={{\r\n                      borderColor: errors.firstName && \"red\",\r\n                    }}\r\n                  />\r\n                  {errors.firstName && (\r\n                    <div className=\"error\">Invalid first name</div>\r\n                  )}\r\n                </div>\r\n                <div className=\"input-container\">\r\n                  <label className=\"label\" htmlFor=\"lastName\">\r\n                    Last name\r\n                  </label>\r\n                  <input\r\n                    className=\"input\"\r\n                    type=\"text\"\r\n                    name=\"lastName\"\r\n                    ref={register({\r\n                      required: true,\r\n                    })}\r\n                    style={{\r\n                      borderColor: errors.lastName && \"red\",\r\n                    }}\r\n                  />\r\n                  {errors.lastName && (\r\n                    <div className=\"error\">Invalid last name</div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              {/*first & last name field*/}\r\n\r\n              {/*Phone field*/}\r\n              {/* <div className=\"input-container\">\r\n                <label className=\"label\" htmlFor=\"phone_number\">\r\n                  Numéro de Téléphone\r\n                </label>\r\n                <input\r\n                  className=\"input\"\r\n                  style={{\r\n                    borderColor: errors.number && \"red\",\r\n                  }}\r\n                  type=\"text\"\r\n                  name=\"phone_number\"\r\n                  ref={register({\r\n                    required: true,\r\n                    minLength: 10,\r\n                    maxLength: 10,\r\n                    validate: (str) => {\r\n                      return RegExp(\"[0-9]{10}\").test(str);\r\n                    },\r\n                  })}\r\n                />\r\n                {errors.phone_number && (\r\n                  <div className=\"error\">\r\n                    {errors.phone_number.type === \"manual\"\r\n                      ? errors.phone_number.message\r\n                      : \"Veuillez introduire une valeur valide\"}\r\n                  </div>\r\n                )}\r\n              </div> */}\r\n              {/*Phone field*/}\r\n\r\n              {/*Password field*/}\r\n              <div className=\"input-container\">\r\n                <label className=\"label\" htmlFor=\"password\">\r\n                  Password\r\n                </label>\r\n                <input\r\n                  className=\"input\"\r\n                  type=\"password\"\r\n                  name=\"password\"\r\n                  ref={register({\r\n                    required: true,\r\n                    minLength: 8,\r\n                  })}\r\n                  style={{\r\n                    borderColor: errors.password && \"red\",\r\n                  }}\r\n                />\r\n                {errors.password && (\r\n                  <div className=\"error\">Invalid password</div>\r\n                )}\r\n              </div>\r\n              {/*Password field*/}\r\n\r\n              {/*Confirm Password field*/}\r\n              <div className=\"input-container\">\r\n                <label className=\"label\" htmlFor=\"confirm_password\">\r\n                  Confirm password !\r\n                </label>\r\n                <input\r\n                  className=\"input\"\r\n                  type=\"password\"\r\n                  name=\"confirm_password\"\r\n                  ref={register({\r\n                    required: true,\r\n                    minLength: 8,\r\n                    validate: (password) => {\r\n                      return getValues(\"password\") == password;\r\n                    },\r\n                  })}\r\n                  style={{\r\n                    borderColor: errors.confirm_password && \"red\",\r\n                  }}\r\n                />\r\n                {errors.confirm_password && (\r\n                  <div className=\"error\">passwords not matching</div>\r\n                )}\r\n              </div>\r\n              {/*Confirm Password field*/}\r\n\r\n              <div className=\"button\">\r\n                <button className=\"submit-button\" type=\"submit\">\r\n                  Signup\r\n                </button>\r\n                {innerLoading && (\r\n                  <div className=\"overlay\">\r\n                    <div className=\"spinner\"></div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </form>\r\n            {/*Form*/}\r\n\r\n            <div className=\"sign-in\">\r\n              <h3>\r\n                Already a member ?\r\n                <span\r\n                  className=\"highlited\"\r\n                  onClick={(_) => {\r\n                    history.push(\"/\");\r\n                  }}\r\n                >\r\n                  {\" \"}\r\n                  Sign in !\r\n                </span>\r\n              </h3>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\DevMobile\\web-React\\noteet\\src\\api\\connect.instance.ts",[],"C:\\DevMobile\\web-React\\noteet\\src\\api\\axios.ts",["101"],"import axios from \"axios\";\r\nimport Cookies from \"js-cookie\";\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_BASE_URL ?? \"API HERE\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: process.env.REACT_APP_API_BASE_URL ?? \"API HERE\",\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n  params: {\r\n    format: \"json\",\r\n  },\r\n});\r\n\r\ninstance.interceptors.response.use(\r\n  (resp) => resp,\r\n  async (error) => {\r\n    console.log(\r\n      \"token was : \" + instance.defaults.headers.common[\"Authorization\"]\r\n    );\r\n\r\n    console.log(\"got an error\");\r\n    console.log(error);\r\n\r\n    const originalRequest = error.config;\r\n    let refreshToken = localStorage.getItem(\"refreshToken\");\r\n\r\n    if (\r\n      [403, 401].includes(error?.response?.status) &&\r\n      !originalRequest._retry\r\n    ) {\r\n      originalRequest._retry = true;\r\n      const res = await refreshExpiredToken(refreshToken);\r\n      if (res?.status === 200) {\r\n        var in15minutes = new Date(new Date().getTime() + 900000);\r\n        Cookies.set(\"accessToken\", res.data.accessToken, {\r\n          expires: in15minutes,\r\n        });\r\n        localStorage.setItem(\"refreshToken\", res.data.refreshToken);\r\n\r\n        axios.defaults.headers.common[\"Authorization\"] =\r\n          \"bearer \" + res.data.accessToken;\r\n\r\n        return axios(originalRequest);\r\n      }\r\n    }\r\n    throw error;\r\n  }\r\n);\r\n\r\nexport const setAuthToken = (token: string | null) => {\r\n  if (token && token != \"no token\") {\r\n    console.log(token);\r\n    //applying token\r\n    instance.defaults.headers.common[\"Authorization\"] = `bearer ${token}`;\r\n  } else {\r\n    console.log(\"no token available\");\r\n    //deleting the token from header\r\n    delete instance.defaults.headers.common[\"Authorization\"];\r\n  }\r\n};\r\n\r\nexport const refreshExpiredToken = (refreshToken: string | null) => {\r\n  return axios\r\n    .post(\"/user/token/\", {\r\n      refreshToken,\r\n    })\r\n    .then((responses) => {\r\n      return responses;\r\n    })\r\n    .catch((errors) => {\r\n      return errors.response;\r\n    });\r\n};\r\n\r\nexport default instance;\r\n","C:\\DevMobile\\web-React\\noteet\\src\\Components\\Loader.tsx",[],"C:\\DevMobile\\web-React\\noteet\\src\\api\\notes.instance.ts",[],"C:\\DevMobile\\web-React\\noteet\\src\\Components\\Toast.tsx",["102","103","104"],{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","severity":1,"message":"110","line":22,"column":60,"nodeType":"111","messageId":"112","endLine":22,"endColumn":62},{"ruleId":"109","severity":1,"message":"110","line":32,"column":19,"nodeType":"111","messageId":"112","endLine":32,"endColumn":21},{"ruleId":"109","severity":1,"message":"113","line":33,"column":20,"nodeType":"111","messageId":"112","endLine":33,"endColumn":22},{"ruleId":"114","severity":1,"message":"115","line":64,"column":6,"nodeType":"116","endLine":64,"endColumn":8,"suggestions":"117"},{"ruleId":"109","severity":1,"message":"113","line":74,"column":25,"nodeType":"111","messageId":"112","endLine":74,"endColumn":27},{"ruleId":"109","severity":1,"message":"113","line":79,"column":38,"nodeType":"111","messageId":"112","endLine":79,"endColumn":40},{"ruleId":"109","severity":1,"message":"110","line":82,"column":19,"nodeType":"111","messageId":"112","endLine":82,"endColumn":21},{"ruleId":"109","severity":1,"message":"113","line":90,"column":13,"nodeType":"111","messageId":"112","endLine":90,"endColumn":15},{"ruleId":"109","severity":1,"message":"110","line":30,"column":44,"nodeType":"111","messageId":"112","endLine":30,"endColumn":46},{"ruleId":"118","severity":1,"message":"119","line":75,"column":14,"nodeType":"120","endLine":75,"endColumn":29},{"ruleId":"109","severity":1,"message":"110","line":26,"column":15,"nodeType":"111","messageId":"112","endLine":26,"endColumn":17},{"ruleId":"114","severity":1,"message":"121","line":35,"column":6,"nodeType":"116","endLine":35,"endColumn":12,"suggestions":"122"},{"ruleId":"109","severity":1,"message":"110","line":97,"column":29,"nodeType":"111","messageId":"112","endLine":97,"endColumn":31},{"ruleId":"123","severity":1,"message":"124","line":17,"column":10,"nodeType":"125","messageId":"126","endLine":17,"endColumn":18},{"ruleId":"109","severity":1,"message":"113","line":51,"column":40,"nodeType":"111","messageId":"112","endLine":51,"endColumn":42},{"ruleId":"109","severity":1,"message":"110","line":70,"column":61,"nodeType":"111","messageId":"112","endLine":70,"endColumn":63},{"ruleId":"109","severity":1,"message":"110","line":75,"column":24,"nodeType":"111","messageId":"112","endLine":75,"endColumn":26},{"ruleId":"109","severity":1,"message":"110","line":81,"column":31,"nodeType":"111","messageId":"112","endLine":81,"endColumn":33},{"ruleId":"109","severity":1,"message":"110","line":31,"column":35,"nodeType":"111","messageId":"112","endLine":31,"endColumn":37},{"ruleId":"127","severity":1,"message":"128","line":6,"column":7,"nodeType":"129","endLine":12,"endColumn":9},{"ruleId":"109","severity":1,"message":"110","line":38,"column":35,"nodeType":"111","messageId":"112","endLine":38,"endColumn":37},{"ruleId":"109","severity":1,"message":"110","line":248,"column":52,"nodeType":"111","messageId":"112","endLine":248,"endColumn":54},{"ruleId":"109","severity":1,"message":"113","line":53,"column":22,"nodeType":"111","messageId":"112","endLine":53,"endColumn":24},{"ruleId":"123","severity":1,"message":"130","line":1,"column":10,"nodeType":"125","messageId":"126","endLine":1,"endColumn":19},{"ruleId":"123","severity":1,"message":"131","line":1,"column":21,"nodeType":"125","messageId":"126","endLine":1,"endColumn":29},{"ruleId":"123","severity":1,"message":"132","line":6,"column":8,"nodeType":"125","messageId":"126","endLine":6,"endColumn":14},"no-native-reassign",["133"],"no-negated-in-lhs",["134"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'checkCookie' and 'interval'. Either include them or remove the dependency array.","ArrayExpression",["135"],"react/style-prop-object","Style prop value must be an object","JSXAttribute","React Hook useEffect has a missing dependency: 'index'. Either include it or remove the dependency array.",["136"],"@typescript-eslint/no-unused-vars","'selected' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useEffect' is defined but never used.","'useState' is defined but never used.","'Loader' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"137","fix":"138"},{"desc":"139","fix":"140"},"Update the dependencies array to be: [checkCookie, interval]",{"range":"141","text":"142"},"Update the dependencies array to be: [index, note]",{"range":"143","text":"144"},[2416,2418],"[checkCookie, interval]",[870,876],"[index, note]"]