[{"C:\\DevMobile\\web-React\\noteet\\src\\index.tsx":"1","C:\\DevMobile\\web-React\\noteet\\src\\reportWebVitals.ts":"2","C:\\DevMobile\\web-React\\noteet\\src\\App.tsx":"3","C:\\DevMobile\\web-React\\noteet\\src\\Components\\SideMenu.tsx":"4","C:\\DevMobile\\web-React\\noteet\\src\\Components\\Panel.tsx":"5","C:\\DevMobile\\web-React\\noteet\\src\\Components\\Card.tsx":"6","C:\\DevMobile\\web-React\\noteet\\src\\utils\\Note.ts":"7","C:\\DevMobile\\web-React\\noteet\\src\\utils\\random.ts":"8","C:\\DevMobile\\web-React\\noteet\\src\\Views\\NoteView.tsx":"9","C:\\DevMobile\\web-React\\noteet\\src\\Views\\SignIn.tsx":"10","C:\\DevMobile\\web-React\\noteet\\src\\Components\\image.tsx":"11"},{"size":478,"mtime":1610963037718,"results":"12","hashOfConfig":"13"},{"size":425,"mtime":1610904671475,"results":"14","hashOfConfig":"13"},{"size":598,"mtime":1611440873251,"results":"15","hashOfConfig":"13"},{"size":4066,"mtime":1611338490142,"results":"16","hashOfConfig":"13"},{"size":1159,"mtime":1611332752149,"results":"17","hashOfConfig":"13"},{"size":2884,"mtime":1611434794546,"results":"18","hashOfConfig":"13"},{"size":280,"mtime":1611262198417,"results":"19","hashOfConfig":"13"},{"size":323,"mtime":1611262182122,"results":"20","hashOfConfig":"13"},{"size":1023,"mtime":1611434431948,"results":"21","hashOfConfig":"13"},{"size":5039,"mtime":1611502220833,"results":"22","hashOfConfig":"13"},{"size":298,"mtime":1611436755587,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1ovkqxo",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"26"},"C:\\DevMobile\\web-React\\noteet\\src\\index.tsx",[],["50","51"],"C:\\DevMobile\\web-React\\noteet\\src\\reportWebVitals.ts",[],"C:\\DevMobile\\web-React\\noteet\\src\\App.tsx",[],"C:\\DevMobile\\web-React\\noteet\\src\\Components\\SideMenu.tsx",[],"C:\\DevMobile\\web-React\\noteet\\src\\Components\\Panel.tsx",[],"C:\\DevMobile\\web-React\\noteet\\src\\Components\\Card.tsx",["52","53","54"],"import { useEffect, useState } from \"react\";\r\nimport trash from \"../Assets/trash.svg\";\r\nimport save from \"../Assets/save.svg\";\r\nimport \"../Styles/Components/Card.scss\";\r\nimport { Note } from \"../utils/Note\";\r\n\r\nimport { useSpring, animated } from \"react-spring\";\r\n\r\ninterface props {\r\n  note: Note;\r\n  index: number;\r\n  updateNote: (note: Note, index: number) => void;\r\n  deleteNote: (index: number) => void;\r\n}\r\nexport const Card: React.FC<props> = ({\r\n  note,\r\n  index,\r\n  updateNote,\r\n  deleteNote,\r\n  ...rest\r\n}) => {\r\n  const [animate, setAnimate] = useState(false);\r\n  const [value, setValue] = useState(\"\");\r\n  useEffect(() => {\r\n    setValue(note.note);\r\n    if (index == 0) {\r\n      console.log(\"will animate \" + note.color + \" : \" + index);\r\n\r\n      setAnimate(false);\r\n      setTimeout(() => {\r\n        setAnimate(true);\r\n      }, 100);\r\n    } else {\r\n      console.log(\"changed index\");\r\n    }\r\n  }, [note]);\r\n  const firstProp = useSpring({\r\n    marginLeft: animate ? \"1rem\" : \"-12.5rem\",\r\n    width: animate ? 310 : 0,\r\n    height: animate ? 310 : 0,\r\n    opacity: animate ? 1 : 0,\r\n    backgroundColor: note.color,\r\n  });\r\n\r\n  const deleteButtonProps = useSpring({\r\n    opacity: note?.note ? 1 : 0,\r\n    height: note?.note ? \"3rem\" : \"0rem\",\r\n    width: note?.note ? \"3rem\" : \"0rem\",\r\n  });\r\n\r\n  const cardProps = useSpring({\r\n    backgroundColor: note.color,\r\n  });\r\n  return (\r\n    <animated.div\r\n      key={note.id}\r\n      className=\"note\"\r\n      style={index ? cardProps : firstProp}\r\n    >\r\n      <textarea\r\n        placeholder=\"Type your note\"\r\n        value={value}\r\n        onChange={({ target }) => {\r\n          setValue(target.value);\r\n        }}\r\n      ></textarea>\r\n      <div className=\"footer\">\r\n        <div className=\"date\">\r\n          <span>\r\n            {new Intl.DateTimeFormat(\"en-US\", {\r\n              year: \"numeric\",\r\n              month: \"long\",\r\n              day: \"2-digit\",\r\n            }).format(Date.parse(note.date.toDateString()))}\r\n          </span>\r\n        </div>\r\n        <div\r\n          className=\"edit\"\r\n          style={{\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"flex-end\",\r\n          }}\r\n        >\r\n          {note.note ? (\r\n            <animated.button\r\n              style={deleteButtonProps}\r\n              onClick={(_) => {\r\n                deleteNote(index);\r\n              }}\r\n            >\r\n              <animated.img src={trash} alt=\"delete Icon\" />\r\n            </animated.button>\r\n          ) : (\r\n            <></>\r\n          )}\r\n          <button\r\n            disabled={value == note.note || !value}\r\n            onClick={(_) => {\r\n              updateNote(new Note(note.color, value), index);\r\n            }}\r\n          >\r\n            <animated.img src={save} alt=\"Save Icon\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </animated.div>\r\n  );\r\n};\r\n","C:\\DevMobile\\web-React\\noteet\\src\\utils\\Note.ts",[],"C:\\DevMobile\\web-React\\noteet\\src\\utils\\random.ts",[],"C:\\DevMobile\\web-React\\noteet\\src\\Views\\NoteView.tsx",["55","56"],"import { useState } from \"react\";\r\nimport { Panel } from \"../Components/Panel\";\r\nimport { Sidemenu } from \"../Components/SideMenu\";\r\nimport \"../Styles/Views/NoteView.scss\";\r\nimport { Note } from \"../utils/Note\";\r\n\r\nconst colors = [\"#ffcf7d\", \"#f0a177\", \"#b095f6\", \"#55cffa\", \"#e6ee96\"];\r\n\r\nfunction NoteView() {\r\n  const [selected, setselected] = useState<\r\n    React.SetStateAction<number | null | undefined>\r\n  >(null);\r\n\r\n  const [notes, setNotes] = useState<Array<Note>>([]);\r\n\r\n  return (\r\n    <div className=\"view\">\r\n      <Sidemenu\r\n        setSelected={(index: number | null | undefined) => {\r\n          setselected(index);\r\n          if (index != null && index != undefined) {\r\n            const aux = new Note(colors[index], \"\");\r\n            notes.unshift(aux);\r\n            setNotes(notes);\r\n          }\r\n        }}\r\n      />\r\n      <Panel\r\n        notes={notes}\r\n        updateNotes={(notes: Array<Note>) => {\r\n          setNotes(notes);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NoteView;\r\n","C:\\DevMobile\\web-React\\noteet\\src\\Views\\SignIn.tsx",["57"],"C:\\DevMobile\\web-React\\noteet\\src\\Components\\image.tsx",["58"],"import React from \"react\";\r\nimport landingImage from \"../Assets/landing-image.svg\";\r\nexport default function LandingImage() {\r\n  return (\r\n    <>\r\n      <img\r\n        src={landingImage}\r\n        style={{\r\n          height: \"100%\",\r\n          width: \"100%\",\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n}\r\n",{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":26,"column":15,"nodeType":"65","messageId":"66","endLine":26,"endColumn":17},{"ruleId":"67","severity":1,"message":"68","line":36,"column":6,"nodeType":"69","endLine":36,"endColumn":12,"suggestions":"70"},{"ruleId":"63","severity":1,"message":"64","line":98,"column":29,"nodeType":"65","messageId":"66","endLine":98,"endColumn":31},{"ruleId":"71","severity":1,"message":"72","line":10,"column":10,"nodeType":"73","messageId":"74","endLine":10,"endColumn":18},{"ruleId":"63","severity":1,"message":"75","line":21,"column":38,"nodeType":"65","messageId":"66","endLine":21,"endColumn":40},{"ruleId":"63","severity":1,"message":"64","line":29,"column":35,"nodeType":"65","messageId":"66","endLine":29,"endColumn":37},{"ruleId":"76","severity":1,"message":"77","line":6,"column":7,"nodeType":"78","endLine":12,"endColumn":9},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'index'. Either include it or remove the dependency array.","ArrayExpression",["81"],"@typescript-eslint/no-unused-vars","'selected' is assigned a value but never used.","Identifier","unusedVar","Expected '!==' and instead saw '!='.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"82","fix":"83"},"Update the dependencies array to be: [index, note]",{"range":"84","text":"85"},[912,918],"[index, note]"]